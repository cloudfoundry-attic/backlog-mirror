// Code generated by counterfeiter. DO NOT EDIT.
package mirrorfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/backlog-mirror/mirror"
	"github.com/salsita/go-pivotaltracker/v5/pivotal"
)

type FakeStoryApi struct {
	GetAllStoriesStub        func(int) *[]pivotal.Story
	getAllStoriesMutex       sync.RWMutex
	getAllStoriesArgsForCall []struct {
		arg1 int
	}
	getAllStoriesReturns struct {
		result1 *[]pivotal.Story
	}
	getAllStoriesReturnsOnCall map[int]struct {
		result1 *[]pivotal.Story
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoryApi) GetAllStories(arg1 int) *[]pivotal.Story {
	fake.getAllStoriesMutex.Lock()
	ret, specificReturn := fake.getAllStoriesReturnsOnCall[len(fake.getAllStoriesArgsForCall)]
	fake.getAllStoriesArgsForCall = append(fake.getAllStoriesArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetAllStories", []interface{}{arg1})
	fake.getAllStoriesMutex.Unlock()
	if fake.GetAllStoriesStub != nil {
		return fake.GetAllStoriesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getAllStoriesReturns
	return fakeReturns.result1
}

func (fake *FakeStoryApi) GetAllStoriesCallCount() int {
	fake.getAllStoriesMutex.RLock()
	defer fake.getAllStoriesMutex.RUnlock()
	return len(fake.getAllStoriesArgsForCall)
}

func (fake *FakeStoryApi) GetAllStoriesCalls(stub func(int) *[]pivotal.Story) {
	fake.getAllStoriesMutex.Lock()
	defer fake.getAllStoriesMutex.Unlock()
	fake.GetAllStoriesStub = stub
}

func (fake *FakeStoryApi) GetAllStoriesArgsForCall(i int) int {
	fake.getAllStoriesMutex.RLock()
	defer fake.getAllStoriesMutex.RUnlock()
	argsForCall := fake.getAllStoriesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStoryApi) GetAllStoriesReturns(result1 *[]pivotal.Story) {
	fake.getAllStoriesMutex.Lock()
	defer fake.getAllStoriesMutex.Unlock()
	fake.GetAllStoriesStub = nil
	fake.getAllStoriesReturns = struct {
		result1 *[]pivotal.Story
	}{result1}
}

func (fake *FakeStoryApi) GetAllStoriesReturnsOnCall(i int, result1 *[]pivotal.Story) {
	fake.getAllStoriesMutex.Lock()
	defer fake.getAllStoriesMutex.Unlock()
	fake.GetAllStoriesStub = nil
	if fake.getAllStoriesReturnsOnCall == nil {
		fake.getAllStoriesReturnsOnCall = make(map[int]struct {
			result1 *[]pivotal.Story
		})
	}
	fake.getAllStoriesReturnsOnCall[i] = struct {
		result1 *[]pivotal.Story
	}{result1}
}

func (fake *FakeStoryApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllStoriesMutex.RLock()
	defer fake.getAllStoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoryApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mirror.StoryApi = new(FakeStoryApi)
